/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.weather.servicebuilder.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import edu.weather.servicebuilder.model.Weather;
import edu.weather.servicebuilder.model.WeatherModel;
import edu.weather.servicebuilder.model.WeatherSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Weather service. Represents a row in the &quot;Weather_Weather&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link WeatherModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WeatherImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see WeatherImpl
 * @see Weather
 * @see WeatherModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class WeatherModelImpl extends BaseModelImpl<Weather>
	implements WeatherModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a weather model instance should use the {@link Weather} interface instead.
	 */
	public static final String TABLE_NAME = "Weather_Weather";
	public static final Object[][] TABLE_COLUMNS = {
			{ "weatherId", Types.BIGINT },
			{ "temperature", Types.DOUBLE },
			{ "description", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("weatherId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("temperature", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table Weather_Weather (weatherId LONG not null primary key,temperature DOUBLE,description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Weather_Weather";
	public static final String ORDER_BY_JPQL = " ORDER BY weather.weatherId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Weather_Weather.weatherId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(edu.weather.servicebuilder.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.edu.weather.servicebuilder.model.Weather"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(edu.weather.servicebuilder.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.edu.weather.servicebuilder.model.Weather"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Weather toModel(WeatherSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Weather model = new WeatherImpl();

		model.setWeatherId(soapModel.getWeatherId());
		model.setTemperature(soapModel.getTemperature());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Weather> toModels(WeatherSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Weather> models = new ArrayList<Weather>(soapModels.length);

		for (WeatherSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_WEATHER_WEATHER_WEATHERFORECAST_NAME =
		"Weather_Weather_WeatherForecast";
	public static final Object[][] MAPPING_TABLE_WEATHER_WEATHER_WEATHERFORECAST_COLUMNS =
		{
			{ "companyId", Types.BIGINT },
			{ "weatherId", Types.BIGINT },
			{ "weatherForecastId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_WEATHER_WEATHER_WEATHERFORECAST_SQL_CREATE =
		"create table Weather_Weather_WeatherForecast (companyId LONG not null,weatherId LONG not null,weatherForecastId LONG not null,primary key (weatherId, weatherForecastId))";
	public static final boolean FINDER_CACHE_ENABLED_WEATHER_WEATHER_WEATHERFORECAST =
		GetterUtil.getBoolean(edu.weather.servicebuilder.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.Weather_Weather_WeatherForecast"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(edu.weather.servicebuilder.service.util.ServiceProps.get(
				"lock.expiration.time.edu.weather.servicebuilder.model.Weather"));

	public WeatherModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _weatherId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setWeatherId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _weatherId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Weather.class;
	}

	@Override
	public String getModelClassName() {
		return Weather.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("weatherId", getWeatherId());
		attributes.put("temperature", getTemperature());
		attributes.put("description", getDescription());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long weatherId = (Long)attributes.get("weatherId");

		if (weatherId != null) {
			setWeatherId(weatherId);
		}

		Double temperature = (Double)attributes.get("temperature");

		if (temperature != null) {
			setTemperature(temperature);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	@Override
	public long getWeatherId() {
		return _weatherId;
	}

	@Override
	public void setWeatherId(long weatherId) {
		_weatherId = weatherId;
	}

	@JSON
	@Override
	public Double getTemperature() {
		return _temperature;
	}

	@Override
	public void setTemperature(Double temperature) {
		_temperature = temperature;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Weather.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Weather toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Weather)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WeatherImpl weatherImpl = new WeatherImpl();

		weatherImpl.setWeatherId(getWeatherId());
		weatherImpl.setTemperature(getTemperature());
		weatherImpl.setDescription(getDescription());

		weatherImpl.resetOriginalValues();

		return weatherImpl;
	}

	@Override
	public int compareTo(Weather weather) {
		long primaryKey = weather.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Weather)) {
			return false;
		}

		Weather weather = (Weather)obj;

		long primaryKey = weather.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Weather> toCacheModel() {
		WeatherCacheModel weatherCacheModel = new WeatherCacheModel();

		weatherCacheModel.weatherId = getWeatherId();

		weatherCacheModel.temperature = getTemperature();

		weatherCacheModel.description = getDescription();

		String description = weatherCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			weatherCacheModel.description = null;
		}

		return weatherCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{weatherId=");
		sb.append(getWeatherId());
		sb.append(", temperature=");
		sb.append(getTemperature());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("edu.weather.servicebuilder.model.Weather");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>weatherId</column-name><column-value><![CDATA[");
		sb.append(getWeatherId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>temperature</column-name><column-value><![CDATA[");
		sb.append(getTemperature());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Weather.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Weather.class
		};
	private long _weatherId;
	private Double _temperature;
	private String _description;
	private Weather _escapedModel;
}